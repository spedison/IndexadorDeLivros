import java.nio.file.Paths

plugins {
    id 'java'
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.10.3'
}

// Force use JDK 21 to use.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    modularity.inferModulePath.set(true)
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
    options.compilerArgs << "-Xlint:unchecked"
}

// Compile with all options of JDK 21.
compileJava {
    options.release = 21
}

group = 'br.com.spedison'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.5.0'

    implementation 'org.apache.pdfbox:pdfbox:2.0.29'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    implementation 'org.slf4j:jul-to-slf4j:2.0.9'
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.4.11'

    implementation 'org.hibernate.orm:hibernate-core:6.6.1.Final'
    implementation 'org.hibernate.common:hibernate-commons-annotations:6.0.6.Final'
    implementation 'jakarta.persistence:jakarta.persistence-api:2.2.3'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'com.github.javafaker:javafaker:1.0.2'

    implementation 'org.apache.opennlp:opennlp-tools:2.2.0' // Verifique pela versão mais recente
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'

    implementation 'org.apache.lucene:lucene-core:10.0.0'
    implementation 'org.apache.lucene:lucene-analysis-common:10.0.0'
    implementation 'org.apache.lucene:lucene-queryparser:10.0.0'
    implementation 'org.apache.lucene:lucene-highlighter:10.0.0'

    implementation 'com.theokanning.openai-gpt3-java:client:0.12.0'

    implementation "org.deeplearning4j:deeplearning4j-nlp:1.0.0-M2.1"       // DL4J NLP para embeddings de texto
    implementation "org.nd4j:nd4j-native-platform:1.0.0-M2.1"              // ND4J para operações vetoriais
    implementation "org.deeplearning4j:deeplearning4j-modelimport:1.0.0-M2.1" // Se precisar carregar modelos externos

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
}

test {
    useJUnitPlatform()
}

application {
    mainClass.set("br.com.spedison.Main")  // No Kotlin, o setter usa a função set()
}

def libsDir = file(layout.buildDirectory.file("libs"))

// Desabilitar distTar e distZip
tasks.named('distTar') {
    enabled = false
}

tasks.named('distZip') {
    enabled = false
}
//tasks.getByName<Tar>("distTar").archiveName = "${project.name}.tar"

tasks.register('copyDependencies', Copy) {
    dependsOn(build)
    from configurations.runtimeClasspath
    into libsDir
}

tasks.register('fatJar', Jar) {
    dependsOn(compileJava)
    archiveClassifier.set('fat')  // Nomeia o JAR como 'fat'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.output

    // Inclui todas as dependências no JAR
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes(
                'Main-Class': 'br.com.spedison.Main'
        )
    }

    destinationDirectory.set(libsDir)
}

jar {

    from sourceSets.main.output

    manifest {
        attributes(
                'Main-Class': application.mainClass,  // Substitua pelo nome completo da sua classe principal
                'Class-Path': configurations.runtimeClasspath.files.collect { it.name }.join(' ')
        )
    }
    // Para fazer um FAT Jar.
    //from {
    //    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    // }
}

//build {
//    dependsOn tasks.jar, tasks.copyDependencies
//}

//TODO: Acabar e deixar funcionando o GraalVM 100% operacional.
graalvmNative {
    binaries {
        main {
            imageName = "indexadorDeLivros"
            mainClass = "br.com.spedison.Main"
            buildArgs.add("-O4")
        }
        test {
            buildArgs.add("-O0")
        }
    }
    binaries.all {
        buildArgs.add("--verbose")
    }
}

tasks.register('unzipDist') {
    dependsOn tasks.distZip
    doLast {
        def zipFile = layout.buildDirectory.file("distributions/${project.name}-${project.version}.zip").get().asFile
        def outputDir = layout.buildDirectory.dir(".").get().asFile

        copy {
            from zipTree(zipFile)
            into outputDir
        }

        println "Arquivo descompactado em: ${outputDir}"
    }
}

tasks.register("defaultTask"){
    dependsOn clean, copyDependencies
}

defaultTasks "defaultTask"

// Tarefas de indexação da fase 1 a fase 5

// Função para ler os parâmetros de um arquivo
def loadArgsFromFile(String filePath) {
    def file = Paths.get(projectDir.toString(), "params", filePath+".params").toFile()
    if (!file.exists()) {
        println("Arquivo %s não foi encontrado.".formatted(file.toString()))
        throw new Exception("O arquivo de parâmetros não foi encontrado: $filePath")
    }

    // Lê o conteúdo do arquivo e retorna uma lista de parâmetros
    return file
            .readLines() // Lê todas as linhas do arquivo
            .collect { it.trim() } // Limpa as linhas
            .findAll {!it.startsWith("#")} // Não processa linhas comentadas.
            .findAll { !it.isEmpty() } // Somente as linhas não vazias.
}


tasks.register('runIndex1', JavaExec) {
    group = 'application'
    description = 'Comando de indexaçao fase 1 - Carrega locais dos arquivos no banco'

    // Defina a classe principal do seu projeto
    mainClass.set(application.mainClass)

    // Caminho do arquivo de onde os parâmetros serão lidos
    def paramsFilePath = "idx_fase_1"

    // Lê os parâmetros do arquivo e os define como argumentos
    args = loadArgsFromFile(paramsFilePath)

    // Se precisar configurar o classpath, use:
    classpath = sourceSets.main.runtimeClasspath

    // Configuração do diretório de trabalho
    workingDir = file(projectDir)

    // Configuração dos parâmetros de memória
    jvmArgs '-Xms512m', '-Xmx4g' // Xms para definir a memória inicial, Xmx para definir a memória máxima
}

tasks.register('runIndex2', JavaExec) {
    group = 'application'
    description = 'Comando de indexaçao fase 2 - Carrega as páginas no banco'

    // Defina a classe principal do seu projeto
    mainClass.set(application.mainClass)

    // Caminho do arquivo de onde os parâmetros serão lidos
    def paramsFilePath = "idx_fase_2"

    // Lê os parâmetros do arquivo e os define como argumentos
    args = loadArgsFromFile(paramsFilePath)

    // Se precisar configurar o classpath, use:
    classpath = sourceSets.main.runtimeClasspath

    // Configuração do diretório de trabalho
    workingDir = file(projectDir)

    // Configuração dos parâmetros de memória
    jvmArgs '-Xms512m', '-Xmx4g' // Xms para definir a memória inicial, Xmx para definir a memória máxima
}

tasks.register('runIndex3', JavaExec) {
    group = 'application'
    description = 'Comando de indexaçao fase 3 - Processa Parágrafos e Palavras. (Usa serviço externo)'

    // Defina a classe principal do seu projeto
    mainClass.set(application.mainClass)

    // Caminho do arquivo de onde os parâmetros serão lidos
    def paramsFilePath = "idx_fase_3"

    // Lê os parâmetros do arquivo e os define como argumentos
    args = loadArgsFromFile(paramsFilePath)

    // Se precisar configurar o classpath, use:
    classpath = sourceSets.main.runtimeClasspath

    // Configuração do diretório de trabalho
    workingDir = file(projectDir)

    // Configuração dos parâmetros de memória
    jvmArgs '-Xms512m', '-Xmx8g' // Xms para definir a memória inicial, Xmx para definir a memória máxima
}

tasks.register('runIndex4', JavaExec) {
    group = 'application'
    description = 'Comando de indexaçao fase 3 - Processa Parágrafos e Palavras. (Usa serviço externo)'

    // Defina a classe principal do seu projeto
    mainClass.set(application.mainClass)

    // Caminho do arquivo de onde os parâmetros serão lidos
    def paramsFilePath = "idx_fase_4"

    // Lê os parâmetros do arquivo e os define como argumentos
    args = loadArgsFromFile(paramsFilePath)

    // Se precisar configurar o classpath, use:
    classpath = sourceSets.main.runtimeClasspath

    // Configuração do diretório de trabalho
    workingDir = file(projectDir)

    // Configuração dos parâmetros de memória
    // jvmArgs '-Xms512m', '-Xmx4g' // Xms para definir a memória inicial, Xmx para definir a memória máxima
    jvmArgs '-Xms512m', '-Xmx8g', '-DpropertyName=propertyValue', '--enable-native-access=ALL-UNNAMED'
}

tasks.register('runIndex5', JavaExec) {
    group = 'application'
    description = 'Comando de indexaçao fase 5 - Indexa Lucene Pessoas Fake'

    // Defina a classe principal do seu projeto
    mainClass.set(application.mainClass)

    // Caminho do arquivo de onde os parâmetros serão lidos
    def paramsFilePath = "idx_fase_5"

    // Lê os parâmetros do arquivo e os define como argumentos
    args = loadArgsFromFile(paramsFilePath)

    // Se precisar configurar o classpath, use:
    classpath = sourceSets.main.runtimeClasspath

    // Configuração do diretório de trabalho
    workingDir = file(projectDir)

    // Configuração dos parâmetros de memória
    // jvmArgs '-Xms512m', '-Xmx16g' // Xms para definir a memória inicial, Xmx para definir a memória máxima
    jvmArgs '-Xms512m', '-Xmx16g', '-DpropertyName=propertyValue', '--enable-native-access=ALL-UNNAMED'
}


// Buscas
tasks.register('runBuscaLivroLike', JavaExec) {
    group = 'application'
    description = 'Comando de Buscas Usando Like no MariaDB'

    // Defina a classe principal do seu projeto
    mainClass.set(application.mainClass)

    // Caminho do arquivo de onde os parâmetros serão lidos
    def paramsFilePath = "busca_mariadb_1_like_livro"

    // Lê os parâmetros do arquivo e os define como argumentos
    args = loadArgsFromFile(paramsFilePath)

    println(args)

    // Se precisar configurar o classpath, use:
    classpath = sourceSets.main.runtimeClasspath

    // Configuração do diretório de trabalho
    workingDir = file(projectDir)

    // Configuração dos parâmetros de memória
    //jvmArgs '-Xms512m', '-Xmx2g' // Xms para definir a memória inicial, Xmx para definir a memória máxima
}

tasks.register('runBuscaLivroRegExp', JavaExec) {
    group = 'application'
    description = 'Comando de Buscas Usando Expressões Regulares no MariaDB'

    // Defina a classe principal do seu projeto
    mainClass.set(application.mainClass)

    // Caminho do arquivo de onde os parâmetros serão lidos
    def paramsFilePath = "busca_mariadb_2_regexp_livro"

    // Lê os parâmetros do arquivo e os define como argumentos
    args = loadArgsFromFile(paramsFilePath)

    println(args)

    // Se precisar configurar o classpath, use:
    classpath = sourceSets.main.runtimeClasspath

    // Configuração do diretório de trabalho
    workingDir = file(projectDir)

    // Configuração dos parâmetros de memória
    //jvmArgs '-Xms512m', '-Xmx2g' // Xms para definir a memória inicial, Xmx para definir a memória máxima
}

tasks.register('runBuscaLivroTextual', JavaExec) {
    group = 'application'
    description = 'Comando de Buscas Usando Operadores Textuais no MariaDB'

    // Defina a classe principal do seu projeto
    mainClass.set(application.mainClass)

    // Caminho do arquivo de onde os parâmetros serão lidos
    def paramsFilePath = "busca_mariadb_3_textual_livro"

    // Lê os parâmetros do arquivo e os define como argumentos
    args = loadArgsFromFile(paramsFilePath)

    println(args)

    // Se precisar configurar o classpath, use:
    classpath = sourceSets.main.runtimeClasspath

    // Configuração do diretório de trabalho
    workingDir = file(projectDir)

    // Configuração dos parâmetros de memória
    //jvmArgs '-Xms512m', '-Xmx2g' // Xms para definir a memória inicial, Xmx para definir a memória máxima
}

tasks.register('runBuscaPessoaFakeLike', JavaExec) {
    group = 'application'
    description = 'Comando de Buscas Usando Operadores Like no MariaDB'

    // Defina a classe principal do seu projeto
    mainClass.set(application.mainClass)

    // Caminho do arquivo de onde os parâmetros serão lidos
    def paramsFilePath = "busca_mariadb_4_like_pessoafake"

    // Lê os parâmetros do arquivo e os define como argumentos
    args = loadArgsFromFile(paramsFilePath)

    println(args)

    // Se precisar configurar o classpath, use:
    classpath = sourceSets.main.runtimeClasspath

    // Configuração do diretório de trabalho
    workingDir = file(projectDir)

    // Configuração dos parâmetros de memória
    //jvmArgs '-Xms512m', '-Xmx2g' // Xms para definir a memória inicial, Xmx para definir a memória máxima
}


tasks.register('runBuscaPessoaFakeTextual', JavaExec) {
    group = 'application'
    description = 'Comando de Buscas Usando Operadores Textuais no MariaDB'

    // Defina a classe principal do seu projeto
    mainClass.set(application.mainClass)

    // Caminho do arquivo de onde os parâmetros serão lidos
    def paramsFilePath = "busca_mariadb_6_textual_pessoafake"

    // Lê os parâmetros do arquivo e os define como argumentos
    args = loadArgsFromFile(paramsFilePath)

    println(args)

    // Se precisar configurar o classpath, use:
    classpath = sourceSets.main.runtimeClasspath

    // Configuração do diretório de trabalho
    workingDir = file(projectDir)

    // Configuração dos parâmetros de memória
    //jvmArgs '-Xms512m', '-Xmx2g' // Xms para definir a memória inicial, Xmx para definir a memória máxima
}

tasks.register('runBuscaPessoaLucene', JavaExec) {
    group = 'application'
    description = 'Comando de Buscas Usando o Lucene'

    // Defina a classe principal do seu projeto
    mainClass.set(application.mainClass)

    // Caminho do arquivo de onde os parâmetros serão lidos
    def paramsFilePath = "busca_lucene_1_pessoafake"

    // Lê os parâmetros do arquivo e os define como argumentos
    args = loadArgsFromFile(paramsFilePath)

    println(args)

    // Se precisar configurar o classpath, use:
    classpath = sourceSets.main.runtimeClasspath

    // Configuração do diretório de trabalho
    workingDir = file(projectDir)

    // Configuração dos parâmetros de memória
    //jvmArgs '-Xms512m', '-Xmx2g' // Xms para definir a memória inicial, Xmx para definir a memória máxima
    jvmArgs '--enable-native-access=ALL-UNNAMED'
}

tasks.register('runBuscaLivroLucene', JavaExec) {
    group = 'application'
    description = 'Comando de Buscas Usando o Lucene na base de Livros'

    // Defina a classe principal do seu projeto
    mainClass.set(application.mainClass)

    // Caminho do arquivo de onde os parâmetros serão lidos
    def paramsFilePath = "busca_lucene_2_livro"

    // Lê os parâmetros do arquivo e os define como argumentos
    args = loadArgsFromFile(paramsFilePath)

    println(args)

    // Se precisar configurar o classpath, use:
    classpath = sourceSets.main.runtimeClasspath

    // Configuração do diretório de trabalho
    workingDir = file(projectDir)

    // Configuração dos parâmetros de memória
    //jvmArgs '-Xms512m', '-Xmx2g' // Xms para definir a memória inicial, Xmx para definir a memória máxima
    jvmArgs '--enable-native-access=ALL-UNNAMED'
}

// Outros comandos
tasks.register('runTextoLema', JavaExec) {
    group = 'application'
    description = 'Comando para lemanizar o texto'

    // Defina a classe principal do seu projeto
    mainClass.set(application.mainClass)

    // Caminho do arquivo de onde os parâmetros serão lidos
    def paramsFilePath = "roda_texto_lemanizado"

    // Lê os parâmetros do arquivo e os define como argumentos
    args = loadArgsFromFile(paramsFilePath)

    println(args)

    // Se precisar configurar o classpath, use:
    classpath = sourceSets.main.runtimeClasspath

    // Configuração do diretório de trabalho
    workingDir = file(projectDir)
}

tasks.register('runTextoRadix', JavaExec) {
    group = 'application'
    description = 'Comando para lemanizar o texto'

    // Defina a classe principal do seu projeto
    mainClass.set(application.mainClass)

    // Caminho do arquivo de onde os parâmetros serão lidos
    def paramsFilePath = "roda_texto_radicalizar"

    // Lê os parâmetros do arquivo e os define como argumentos
    args = loadArgsFromFile(paramsFilePath)

    println(args)

    // Se precisar configurar o classpath, use:
    classpath = sourceSets.main.runtimeClasspath

    // Configuração do diretório de trabalho
    workingDir = file(projectDir)
}

task indexaLucene(type: JavaExec) {
    // Definindo a classe principal do seu programa
    mainClass = 'br.com.spedison.Main' // Substitua com o nome da sua classe principal

    // Configurando o classpath do projeto (necessário para encontrar classes e dependências)
    classpath = sourceSets.main.runtimeClasspath

    // Argumentos para o programa
    args '-il', './idx' // Substitua pelos argumentos desejados

    // Argumentos para a JVM
    jvmArgs '-Xmx2g', '-DpropertyName=propertyValue', '--enable-native-access=ALL-UNNAMED' // Exemplo: define o máximo de memória e uma propriedade customizada

    // (Opcional) Defina o diretório de trabalho, caso seja necessário
    workingDir = project.projectDir // Substitua pelo diretório desejado ou remova se não precisar
}

task indexaIdx(type: JavaExec) {
    // Definindo a classe principal do seu programa
    mainClass = 'br.com.spedison.Main' // Substitua com o nome da sua classe principal

    // Configurando o classpath do projeto (necessário para encontrar classes e dependências)
    classpath = sourceSets.main.runtimeClasspath

    // Argumentos para o programa
    args '-ckd', './idx'

    // Argumentos para a JVM
    jvmArgs '-Xmx2g', '-DpropertyName=propertyValue', '--enable-native-access=ALL-UNNAMED'

    // (Opcional) Defina o diretório de trabalho, caso seja necessário
    workingDir = project.projectDir // Substitua pelo diretório desejado ou remova se não precisar
}

